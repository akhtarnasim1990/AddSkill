/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int res = 0 , carr = 0;
        ListNode head = new ListNode(-1);
        ListNode temp = head;
        while(l1 != null && l2 != null){
            res = l1.val + l2.val + carr;
            carr = res/10;
            res = res%10;
            ListNode curr = new ListNode(res);
            temp.next = curr;
            temp = temp.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        if(l1 == null && l2 != null){
            if(carr == 0){
                temp.next = l2;
                return head.next;
            }
            else{
                while(l2 != null){
                    res = l2.val + carr;
                    carr = res/10;
                    res = res%10;
                    ListNode curr = new ListNode(res);
                    temp.next = curr;
                    temp = temp.next;
                    l2 = l2.next;
                }
                if(carr != 0){
                    ListNode curr = new ListNode(carr);
                    temp.next = curr;
                    return head.next;
                }
                else{
                    return head.next;
                }
            }
        }
        if(l2 == null && l1 != null){
            if(carr == 0){
                temp.next = l1;
                return head.next;
            }
            else{
                while(l1 != null){
                    res = l1.val + carr;
                    carr = res/10;
                    res = res%10;
                    ListNode curr = new ListNode(res);
                    temp.next = curr;
                    temp = temp.next;
                    l1 = l1.next;
                }
                if(carr != 0){
                    ListNode curr = new ListNode(carr);
                    temp.next = curr;
                    return head.next;
                }
                else{
                    return head.next;
                }
            }
        }
        if(carr != 0){
            ListNode curr = new ListNode(carr);
            temp.next = curr;
        }
        return head.next;
    }
}
