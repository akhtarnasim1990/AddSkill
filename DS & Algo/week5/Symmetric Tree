/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
        levelOrder(root , list);
        return isPalindromic(list);
        
    }
    
    void levelOrder(TreeNode root , ArrayList<ArrayList<Integer>> list){
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(q.isEmpty() == false){
            int count = q.size();
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i=0; i<count; i++){
                TreeNode curr = q.poll();
                if(curr.left != null){
                    q.add(curr.left);
                    temp.add(curr.left.val);
                }
                else{
                    temp.add(null);
                }
                if(curr.right != null){
                    q.add(curr.right);
                    temp.add(curr.right.val);
                }
                else{
                    temp.add(null);
                }
            }
            list.add(temp);
        }
    }
    
    boolean isPalindromic(ArrayList<ArrayList<Integer>> list){
        for(int i=0; i<list.size(); i++){
            int len = list.get(i).size();
            for(int j=0; j<len/2; j++){
                if(list.get(i).get(j) != list.get(i).get(len-1-j)){
                    return false;
                }
            }
        }
        return true;
    }
}
