/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null)
            return true;
        if((p == null && q != null) || (q != null && p == null) || p == null || q == null)
            return false;
        ArrayList<Integer> tree1 = new ArrayList<Integer>();
        ArrayList<Integer> tree2 = new ArrayList<Integer>();
        Queue<TreeNode> Q = new LinkedList<TreeNode>();
        levelOrder(p , tree1 , Q);
        levelOrder(q , tree2 , Q);
        return tree1.equals(tree2);
    }
    
    void levelOrder(TreeNode root , ArrayList<Integer> tree , Queue<TreeNode> q){
        q.add(root);
        tree.add(root.val);
        while(q.isEmpty()  == false){
            TreeNode curr = q.poll();
            if(curr.left != null){
                q.add(curr.left);
                tree.add(curr.left.val);
            }
            else{
                tree.add(null);
            }
            if(curr.right != null){
                q.add(curr.right);
                tree.add(curr.right.val);
            }
            else{
                tree.add(null);
            }
        }
    }
}
